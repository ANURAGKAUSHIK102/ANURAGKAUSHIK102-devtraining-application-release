<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ux_client_script">
    <sys_ux_client_script action="INSERT_OR_UPDATE">
        <includes>7c7df4e3c3bb20104b8e88c7c840dd18</includes>
        <macroponent display_value="Overview">0ed67ee02f472110889f28a62799b65d</macroponent>
        <name>Navigate to Conversations Tab</name>
        <preset/>
        <required_translations>[ ]</required_translations>
        <script><![CDATA[/**
 * @param {params} params
 * @param {api} params.api
 * @param {any} params.event
 * @param {any} params.imports
 */
 function handler({
    api,
    event,
    helpers,
    imports
}) {
    const {
        encodeVAURIQuery
    } = imports['sn_ci_analytics.VAConditionBuilderEncoderUtils']();
    let query = null,
        extractedValue = '',
        paramedQuery = '';
    
    const VA_SUCCESS_FILTER_ID = "f06c48305314f010a86bddeeff7b1282";
    const CONST_SPLITTER = '^';
    const CONST_PROP_VALUE = 'property_value=';
    const _extractValueFromPARQuery = (parQuery) => {
        try{
            if (!parQuery) return null;
            return parQuery.match(/\^property_value=(.*?)([\^]|$)/)[1]; //extracts{value} from ...^property_value={value} or ...^property_value={value}^other_properties=...
        }catch(e){
            return null;
        }
    };
    
    try {
        switch (event.elementId) {
            case 'go_to_conversations_vasuccess_tab_button':
                query = 'sys_id:' + VA_SUCCESS_FILTER_ID;
                break;
            case 'survey_result_widget':
            case 'conversation_state_chart':
                paramedQuery = event.payload.params.query;
                extractedValue = _extractValueFromPARQuery(paramedQuery);
                if (!extractedValue) return;
                query = encodeVAURIQuery([{
                    'field': event.elementId == 'conversation_state_chart' ? 'End State' : 'Feedback Result',
                    'operator': 'is any of',
                    'conditionValue': [extractedValue],
                    'comparisonType': 'NEW_QUERY',
                }]);
                break;
            default:
                throw 'invalid element';
        }
        if (query){
            helpers.navigate.to('conversations', null, {
                startDate: api.context.props.startDate,
                endDate: api.context.props.endDate,
                encodedQuery: query

            });
        }
    } catch (e) {
        return false;
    }
}]]></script>
        <script_api_version>2.0.0</script_api_version>
        <sys_class_name>sys_ux_client_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-05-23 17:49:43</sys_created_on>
        <sys_id>5ce6bee02f472110889f28a62799b6e3</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Navigate to Conversations Tab</sys_name>
        <sys_package display_value="NeedIt" source="x_58872_needit">6ead8e780f603200cd674f8ce1050ed1</sys_package>
        <sys_policy/>
        <sys_scope display_value="NeedIt">6ead8e780f603200cd674f8ce1050ed1</sys_scope>
        <sys_update_name>sys_ux_client_script_5ce6bee02f472110889f28a62799b6e3</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-05-23 17:49:43</sys_updated_on>
        <target>macroponent</target>
        <type>default</type>
    </sys_ux_client_script>
</record_update>

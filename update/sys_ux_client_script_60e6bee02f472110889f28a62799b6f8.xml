<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ux_client_script">
    <sys_ux_client_script action="INSERT_OR_UPDATE">
        <includes>7c7df4e3c3bb20104b8e88c7c840dd18</includes>
        <macroponent display_value="Overview">0ed67ee02f472110889f28a62799b65d</macroponent>
        <name>Navigate to Users Tab</name>
        <preset/>
        <required_translations>[ ]</required_translations>
        <script><![CDATA[/**
 * @param {params} params
 * @param {api} params.api
 * @param {any} params.event
 * @param {any} params.imports
 * @param {ApiHelpers} params.helpers
 */
function handler({
    api,
    event,
    helpers,
    imports
}) {
    const MILLISECONDS_IN_ONE_DAY = 86400000;
    const {
        encodeVAURIQuery
    } = imports['sn_ci_analytics.VAConditionBuilderEncoderUtils']();
    let query = null;
    const {
        startDate,
        endDate
    } = api.context.props;

    /*
    * Takes in the current date range and returns the end of date range in epoc format.
    * Compares milliseconds diff between current date range and adds that to epoc start date
    * to return the epoc end date.
    */
    const calculateActiveUserDateRangeEndInEpocFormat = (startDate, endDate) => {
        const startDateObject = new Date(startDate);
        const endDateObject = new Date(endDate);
        const differenceInMilliseconds = Math.abs(endDateObject - startDateObject) + MILLISECONDS_IN_ONE_DAY;
        const epocFormatStartDate = new Date('1970-01-01');
        const epocFormatEndDate = new Date(epocFormatStartDate.getTime() + differenceInMilliseconds);
        return epocFormatEndDate;
    };
    
    try {
        switch (event.elementId) {
            case 'active_user_list_navigate':
                query = encodeVAURIQuery([{
                    'field': 'Conversation Exists',
                    'operator': '',
                    'conditionValue': '',
                    'comparisonType': 'NEW_QUERY',
                    'children': [{
                        'field': 'Conversation Time',
                        'operator': 'is in the last',
                        'conditionValue': calculateActiveUserDateRangeEndInEpocFormat(startDate, endDate),
                        'comparisonType': 'IN_WHICH'
                    }]
                }]);
                break;
            default:
                throw 'invalid element';
        }
        if (query) {
            helpers.navigate.to('users', null, {
                startDate: api.context.props.startDate,
                endDate: api.context.props.endDate,
                encodedQuery: query
            });
        }
    } catch (e) {
        return false;
    }
}]]></script>
        <script_api_version>2.0.0</script_api_version>
        <sys_class_name>sys_ux_client_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-05-23 17:49:44</sys_created_on>
        <sys_id>60e6bee02f472110889f28a62799b6f8</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Navigate to Users Tab</sys_name>
        <sys_package display_value="NeedIt" source="x_58872_needit">6ead8e780f603200cd674f8ce1050ed1</sys_package>
        <sys_policy/>
        <sys_scope display_value="NeedIt">6ead8e780f603200cd674f8ce1050ed1</sys_scope>
        <sys_update_name>sys_ux_client_script_60e6bee02f472110889f28a62799b6f8</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-05-23 17:49:44</sys_updated_on>
        <target>macroponent</target>
        <type>default</type>
    </sys_ux_client_script>
</record_update>
